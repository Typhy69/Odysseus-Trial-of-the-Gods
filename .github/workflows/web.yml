name: Build & Deploy Godot Web (Pages)

on:
  push:
    branches: [ "main", "master" ]
  workflow_dispatch:

# Required for Pages
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Godot editor (4.2.2) from GitHub Releases
        run: |
          set -e
          GODOT_VER="4.2.2"
          mkdir -p "$HOME/godot_bin"
          wget -O /tmp/godot.zip "https://github.com/godotengine/godot/releases/download/${GODOT_VER}-stable/Godot_v${GODOT_VER}-stable_linux.x86_64.zip"
          unzip -q /tmp/godot.zip -d "$HOME/godot_bin"
          chmod +x "$HOME/godot_bin/Godot_v${GODOT_VER}-stable_linux.x86_64"
          echo "GODOT_BIN=$HOME/godot_bin/Godot_v${GODOT_VER}-stable_linux.x86_64" >> $GITHUB_ENV

      - name: Install HTML5 export templates
        run: |
          set -e
          GODOT_VER="4.2.2"
          DEST="$HOME/.local/share/godot/export_templates/${GODOT_VER}.stable"
          mkdir -p "$DEST"
          wget -O /tmp/templates.tpz "https://github.com/godotengine/godot/releases/download/${GODOT_VER}-stable/Godot_v${GODOT_VER}-stable_export_templates.tpz"
          mkdir -p /tmp/templates && unzip -q /tmp/templates.tpz -d /tmp/templates
          mv /tmp/templates/templates/* "$DEST/"

      - name: Verify project.godot at repo root
        run: |
          set -e
          test -f project.godot || { echo "project.godot NOT at repo root"; exit 1; }

      - name: Write minimal Web preset (create/overwrite)
        run: |
          set -e
          cat > export_presets.cfg <<'EOF'
          [preset.0]
          name="Web"
          platform="Web"
          export_path="build/web/index.html"

          [preset.0.options]
          binary_format/embed_pck=true
          html/canvas_resize_policy=2
          EOF

      - name: Ensure icon exists (placeholder if missing)
        run: |
          set -e
          ICON=$(grep -E '^config/icon=' project.godot | cut -d\" -f2 || true)
          if [ -n "$ICON" ]; then
            REL=${ICON#res://}
            if [ ! -f "$REL" ]; then
              mkdir -p "$(dirname "$REL")"
              echo '<svg xmlns="http://www.w3.org/2000/svg" width="128" height="128"><rect width="100%" height="100%" fill="#1e1e2e"/><circle cx="64" cy="64" r="36" fill="#f59e0b"/><text x="64" y="72" font-size="20" text-anchor="middle" fill="#111">OD</text></svg>' > "$REL"
            fi
          fi

      - name: Check main scene exists
        run: |
          set -e
          MAIN=$(grep -E '^run/main_scene=' project.godot | cut -d\" -f2 | sed 's#^res://##')
          [ -n "$MAIN" ] || { echo "run/main_scene not set in project.godot"; exit 1; }
          [ -f "$MAIN" ] || { echo "Main scene not found at $MAIN"; exit 1; }

      - name: Export HTML5
        run: |
          set -e
          mkdir -p build/web
          "$GODOT_BIN" --headless --export-release "Web" build/web/index.html
          cp build/web/index.html build/web/404.html || true
          ls -la build/web || true

      # Upload the built site for the deploy job
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: build/web

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
